/*1. Write a program to print the area and perimeter of a triangle having sides of
3, 4 and 5 units by creating a class named &#39;Triangle&#39; with parameter in its
constructor.*/
package assingmnet;

import java.math.*;

public class Q1 {// Triangle
	private int side1;
	private int side2;
	private int side3;
	double s, peri,area;

	public Q1(int side1, int side2, int side3) {

		this.side1 = side1;
		this.side2 =side2;
		this.side3 = side3;
	}
	public double getPeri()
	{
		peri=side1 + side2 + side3;
		return (peri);
	}

	public double getArea()
	{
		  s = peri/2;
		 return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
	}
	
	public static void main(String[] args) {
		Q1 triangle1=new Q1(3, 4, 5);
		triangle1.getPeri();
		triangle1.getArea();	
		System.out.println("Perimeter of the given tringle is "+ triangle1.getPeri());
		System.out.println("Area of the given tringle is "+ triangle1.getArea());
	}
	
}


2.Print the sum, difference and product of two complex numbers by creating a
class, named Complex; with separate methods for each operation whose real and
imaginary parts are entered by user. Use Constructors to initialize the data
members
public class Complex {
    // Data members to hold real and imaginary parts of complex numbers
    private double real;
    private double imag;

    // Constructor to initialize the complex number
    public Complex(double real, double imag) {
        this.real = real;
        this.imag = imag;
    }

    // Method to add two complex numbers
    public Complex add(Complex other) {
        double newReal = this.real + other.real;
        double newImag = this.imag + other.imag;
        return new Complex(newReal, newImag);
    }

    // Method to subtract two complex numbers
    public Complex subtract(Complex other) {
        double newReal = this.real - other.real;
        double newImag = this.imag - other.imag;
        return new Complex(newReal, newImag);
    }

    // Method to multiply two complex numbers
    public Complex multiply(Complex other) {
        double newReal = this.real * other.real - this.imag * other.imag;
        double newImag = this.real * other.imag + this.imag * other.real;
        return new Complex(newReal, newImag);
    }

    // Utility method to print the complex number in a+bi format
    @Override
    public String toString() {
        if (imag >= 0) {
            return real + " + " + imag + "i";
        } else {
            return real + " - " + (-imag) + "i";
        }
    }

    // Main method to test the Complex class
    public static void main(String[] args) {
        // Creating two complex numbers
        Complex c1 = new Complex(5, 3);
        Complex c2 = new Complex(2, 4);

        // Performing operations
        Complex sum = c1.add(c2);
        Complex difference = c1.subtract(c2);
        Complex product = c1.multiply(c2);

        // Displaying results
        System.out.println("First Complex Number: " + c1);
        System.out.println("Second Complex Number: " + c2);
        System.out.println("Sum: " + sum);
        System.out.println("Difference: " + difference);
        System.out.println("Product: " + product);
    }
}



3. Write a program by creating an &#39;Employee&#39; class having the following methods
and print the final salary.
a. &#39;getInfo()&#39; which takes the salary, number of hours of work per day of
employee as parameter
b. &#39;AddSal()&#39; which adds $10 to salary of the employee if it is less
than $500.
c. &#39;AddWork()&#39; which adds $5 to salary of employee if the number of hours of
work per day is more than 6 hours.
package javaassignment3;

import java.util.Scanner;

public class Employee {
	private long salary;
	private int hoursworkprday;

	public void getInfo(long salary, int hoursworkprday) {

		this.salary = salary;
		this.hoursworkprday = hoursworkprday;
	}
	public void addSal() 
	{
    if ( salary < 500)
    {
    	salary =salary+10;
    }}
    public void addWork()
    { if (hoursworkprday>6)
    {
    	salary =salary+5;
    }
    	
	}
    @Override
	public String toString() {
		return "Employee [salary=" + salary + ", hoursworkprday=" + hoursworkprday + "]";
	}
	public static void main(String[] args) {
    	
    	 Employee employee =new Employee();
    	 employee.getInfo(50000, 10);
    	 employee.addSal();
    	 employee.addWork();
    	 System.out.println(employee);
	}
}
4. Create a class called &#39;Matrix&#39; containing constructor that initializes the number
of rows and number of columns of a new Matrix object. The Matrix class has the
following information:
a. number of rows of matrix
b. number of columns of matrix
c. elements of matrix in the form of 2D array
The Matrix class has methods for each of the following:
a. get the number of rows
b. get the number of columns
c. set the elements of the matrix at given position (i,j)
d. adding two matrices. If the matrices are not addable, &quot;Matrices cannot be
added&quot; will be displayed.

package javaassignment3;

import java.util.Arrays;
import java.util.Iterator;
import java.util.Scanner;

 class Matrix {
	
	int row;
	int column;
	int[][] arr;
	Scanner sc = new Scanner(System.in);
	public Matrix(int r, int c) {
		row = r;
		column = c;
		arr = new int[row][column];
	}

	public int getRows() {
		return row;
	}
	public int getColumns() {
		return column;
	}
	public int getElement(int r, int c) 
	{
		return arr[r][c];
	}
	public void setElement(int r, int c, int element) 
	{
		arr[r][c] = element;
	}

	public static Matrix add(Matrix x, Matrix y)
	{
		if ((x.row == y.row) && (x.column == y.column))
		{
			Matrix m = new Matrix(x.row, x.column);
			for (int i = 0; i < m.row; i++) 
			{
				for (int j = 0; j < m.column; j++) 
				{
					m.setElement(i, j, (x.getElement(i, j) + y.getElement(i, j)));
				}
			}
			return m;
		} 
		else 
		{
			System.out.println("Matrices can not be added");
			return new Matrix(0, 0);
		}
	}

	@Override
	public String toString() {
		return "Matrix [row=" + row + ", column=" + column + ", arr=" + Arrays.toString(arr) + ", sc=" + sc
				+ ", getRows()=" + getRows() + ", getColumns()=" + getColumns() + "]";
	}
	
}

package javaassignment3;

public class TestMatix {

	public static void main(String[] args) {
	 Matrix matrix =new Matrix(3, 3);
	 matrix.setElement(0, 0, 1);
	 matrix.setElement(0, 1, 2);
	 matrix.setElement(0, 2, 3);
	 matrix.setElement(1, 0, 4);
	 matrix.setElement(1, 1, 5);
	 matrix.setElement(1, 2, 6);
	 matrix.setElement(2, 0, 7);
	 matrix.setElement(2, 1, 8);
	 matrix.setElement(2, 2, 9);
	 Matrix matrix1 =new Matrix(3, 3);
	 matrix1.setElement(0, 0, 1);
	 matrix1.setElement(0, 1, 2);
	 matrix1.setElement(0, 2, 3);
	 matrix1.setElement(1, 0, 4);
	 matrix1.setElement(1, 1, 5);
	 matrix1.setElement(1, 2, 6);
	 matrix1.setElement(2, 0, 7);
	 matrix1.setElement(2, 1, 8);
	 matrix1.setElement(2, 2, 9);
	 matrix1 .add(matrix, matrix1);
	 System.out.println(matrix1);
	 

	}

}






5.Write a class Time with three data members to store hr, min and seconds.
Create two constructors and apply checks to set valid time. (hr&lt;24, min&lt;60,
sec&lt;60). Also create display function which displays all data members.
package javaassignment3;

public class Time {
	private int hr, min, seconds;

	public Time() {
		super();
	}

	public Time(int hr, int min, int seconds) {
		this.hr = hr;
		this.min = min;
		this.seconds = seconds;
	}

	public int getHr() {

		return hr;
	}

	public void setHr(int hr) {
		if (hr <= 24)
			this.hr = hr;
		else
			System.out.println("plase enter hours between 24");
	}

	public int getMin() {

		return min;
	}

	public void setMin(int min) {
		if (min <= 60)
			this.min = min;
		else
			System.out.println("plase enter minits between 60");
	}

	public int getSeconds() {
		return seconds;
	}

	public void setSeconds(int seconds) {
		if (seconds <= 60)
			this.seconds = seconds;
		else
			System.out.println("plase enter seconds between 60");

	}

	@Override
	public String toString() {
		return "Time \nhr  =" + hr +
				",\nmin =" + min + 
				",\nseconds=" + seconds;
	}

	public static void main(String[] args) 
	{

		Time time =new Time(25, 20, 60);
		System.out.println(time);
		
		
	}

}


6. Create a SavingsAccount class. Use a static data member annual Interest Rate
to store the annual interest rate for each of the savers. Each member of the class
contains a private data member
savingsBalance indicating the amount the saver currently has on deposit. Provide
member function calculateMonthlyInterest() that calculates the monthlyinterest
by multiplying the balance by annualInterestRate
divided by 12; this interest should be added to savingsBalance. Provide a static
member functionmodifyInterestRate() that sets the static annualInterestRate to a
new value. Write a driver program to
test class SavingsAccount. Instantiate two different objects of
classSavingsAccount, saver1 and saver2, with balances of
2000.00 and 3000.00,respectively. Set the annualInterestRate to
3 percent. Then calculate the monthlyinterest and print the new balances for
each of the savers. Then set
theannualInterestRate to 4 percent, calculate the next month&#39;s interest and print
the new balances for each of the savers.


SavingsAccount Class

public class SavingsAccount {
    private static double annualInterestRate = 0.0; // Annual interest rate for all savers
    private double savingsBalance; // Individual savings balance

    // Constructor
    public SavingsAccount(double savingsBalance) {
        this.savingsBalance = savingsBalance;
    }

    // Calculate and add monthly interest to the savings balance
    public void calculateMonthlyInterest() {
        double monthlyInterest = (this.savingsBalance * annualInterestRate / 100) / 12;
        this.savingsBalance += monthlyInterest;
    }

    // Modify the annual interest rate for all savers
    public static void modifyInterestRate(double newInterestRate) {
        annualInterestRate = newInterestRate;
    }

    // Getter for the savings balance
    public double getSavingsBalance() {
        return savingsBalance;
    }
}
Driver Program to Test SavingsAccount

public class SavingsAccountTest {
    public static void main(String[] args) {
        // Create two savings account objects with given balances
        SavingsAccount saver1 = new SavingsAccount(2000.00);
        SavingsAccount saver2 = new SavingsAccount(3000.00);

        // Set annual interest rate to 3% and calculate monthly interest
        SavingsAccount.modifyInterestRate(3.0);
        saver1.calculateMonthlyInterest();
        saver2.calculateMonthlyInterest();

        // Print the new balances for each saver
        System.out.println("New Balance for Saver 1 at 3% interest rate: $" + saver1.getSavingsBalance());
        System.out.println("New Balance for Saver 2 at 3% interest rate: $" + saver2.getSavingsBalance());

        // Set annual interest rate to 4%, calculate next month's interest, and print new balances
        SavingsAccount.modifyInterestRate(4.0);
        saver1.calculateMonthlyInterest();
        saver2.calculateMonthlyInterest();

        System.out.println("New Balance for Saver 1 at 4% interest rate: $" + saver1.getSavingsBalance());
        System.out.println("New Balance for Saver 2 at 4% interest rate: $" + saver2.getSavingsBalance());
    }
}



7. Create a simple bank management system. Below is a brief explanation of each
class and its functionality:
Account Class: Represents a bank account with attributes such as account
number and balance. It provides methods to withdraw, deposit, and get the
balance of the account.
Customer Class: Represents a bank customer with attributes like name, address,
mobile number, and an associated account. It provides methods for withdrawing,
depositing, getting account details, transferring money to another account, and
displaying customer details.
Bank Class: Represents a bank entity with a fixed maximum size of accounts and
customers,interest,size,MAX_SIZE. It provides methods to add an account,

remove an account, display account details, and update customer details.
Additionally, it has a method to apply interest to an account.
BankTester Class: This class serves as a test class where the main method is
implemented to simulate interactions with the bank system. It allows customers
to perform actions like displaying details, withdrawing money, depositing money,
and transferring funds between accounts.

Account Class
public class Account {
    private String accountNumber;
    private double balance;

    public Account(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance -= amount;
        }
    }

    public double getBalance() {
        return balance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }
}

Customer Class
public class Customer {
    private String name;
    private String address;
    private String mobileNumber;
    private Account account;

    public Customer(String name, String address, String mobileNumber, Account account) {
        this.name = name;
        this.address = address;
        this.mobileNumber = mobileNumber;
        this.account = account;
    }

    public void deposit(double amount) {
        account.deposit(amount);
    }

    public void withdraw(double amount) {
        account.withdraw(amount);
    }

    public void transfer(Customer recipient, double amount) {
        if (this.account.getBalance() >= amount) {
            this.withdraw(amount);
            recipient.deposit(amount);
        }
    }

    public void displayCustomerDetails() {
        System.out.println("Customer Name: " + name);
        System.out.println("Address: " + address);
        System.out.println("Mobile Number: " + mobileNumber);
        System.out.println("Account Number: " + account.getAccountNumber());
        System.out.println("Current Balance: " + account.getBalance());
    }

    public Account getAccount() {
        return account;
    }
}
Bank Class
import java.util.ArrayList;

public class Bank {
    private ArrayList<Customer> customers = new ArrayList<>();
    private final int MAX_SIZE = 100;

    public void addAccount(Customer customer) {
        if (customers.size() < MAX_SIZE) {
            customers.add(customer);
        } else {
            System.out.println("Bank customer limit reached.");
        }
    }

    public void removeAccount(String accountNumber) {
        customers.removeIf(customer -> customer.getAccount().getAccountNumber().equals(accountNumber));
    }

    public void displayAccountDetails(String accountNumber) {
        for (Customer customer : customers) {
            if (customer.getAccount().getAccountNumber().equals(accountNumber)) {
                customer.displayCustomerDetails();
                return;
            }
        }
        System.out.println("Account not found.");
    }

    public void applyInterest(String accountNumber, double interestRate) {
        for (Customer customer : customers) {
            if (customer.getAccount().getAccountNumber().equals(accountNumber)) {
                double interest = customer.getAccount().getBalance() * interestRate / 100;
                customer.deposit(interest);
                return;
            }
        }
    }
}
BankTester Class
public class BankTester {
    public static void main(String[] args) {
        Bank bank = new Bank();

        Account acc1 = new Account("12345", 1000);
        Customer cust1 = new Customer("John Doe", "123 Elm Street", "555-1234", acc1);
        bank.addAccount(cust1);

        Account acc2 = new Account("67890", 1500);
        Customer cust2 = new Customer("Jane Doe", "456 Oak Street", "555-5678", acc2);
        bank.addAccount(cust2);

        // Display initial account details
        bank.displayAccountDetails("12345");
        bank.displayAccountDetails("67890");

        // Perform transactions
        cust1.deposit(500);
        cust1.withdraw(200);
        cust2.transfer(cust1, 300);

        // Apply interest
        bank.applyInterest("12345", 5);

        // Display updated account details
        System.out.println("\nAfter transactions and interest:");
        bank.displayAccountDetails("12345");
        bank.displayAccountDetails("67890");
    }
}

8. Create classes to represent a Library and Book. The Library class should contain
an Array of Book objects. Implement methods to add, remove, and display books
in the library.
Book Class

public class Book {
    private String title;
    private String author;

    // Constructor
    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    // Getters
    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    // ToString method to display book information
    @Override
    public String toString() {
        return "Title: \"" + title + "\", Author: " + author;
    }
}
Library Class
import java.util.ArrayList;
import java.util.List;

public class Library {
    private List<Book> books;

    // Constructor
    public Library() {
        this.books = new ArrayList<>();
    }

    // Method to add a book to the library
    public void addBook(Book book) {
        books.add(book);
    }

    // Method to remove a book from the library
    public void removeBook(String title) {
        books.removeIf(book -> book.getTitle().equals(title));
    }

    // Method to display all books in the library
    public void displayBooks() {
        if (books.isEmpty()) {
            System.out.println("The library is empty.");
        } else {
            System.out.println("Library Books:");
            books.forEach(System.out::println);
        }
    }
}
Main Class to Test
public class Main {
    public static void main(String[] args) {
        // Creating the library
        Library myLibrary = new Library();

        // Adding books to the library
        myLibrary.addBook(new Book("The Hobbit", "J.R.R. Tolkien"));
        myLibrary.addBook(new Book("1984", "George Orwell"));
        myLibrary.addBook(new Book("The Catcher in the Rye", "J.D. Salinger"));

        // Displaying books in the library
        System.out.println("After adding books:");
        myLibrary.displayBooks();

        // Removing a book from the library
        myLibrary.removeBook("1984");

        // Displaying books after removal
        System.out.println("\nAfter removing a book:");
        myLibrary.displayBooks();
    }
}






9. Design classes ShoppingCart and Product. ShoppingCart class that contains an
Array of Product objects. Implement methods to add products to the cart,
calculate the total cost, and display the contents of the cart. (Decide the data
members and methods of the classes
Effectively)

package assignment3java;



class Product
{
	private String  name;
	private double price;
	private  int productid=0;
	private double total;
	
	public Product(String name,double price) {
		super();
		this.name = name;
		this. price=price;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public int getProductid() {
		return productid;
	}

	public void setProductid() {
		this.productid = productid+1;
	}
	
	public void setTotal()
	{
		total= price * productid;
	}
	public double getTotal()
	{
		return total;
	}

	@Override
	public String toString() {
		return "product [name=" + name + ", price=" + price + ", productid=" + productid + ", total=" + total + "]";
	}
	
}
class ShoppingCart 
{
	public static void main(String[] args) {
		 double totalCost=0;
   Product product []=new  Product[3];
   product [0]= new  Product("milk", 50.23);
   product [1]= new  Product("coconut", 150);
   product [2]= new  Product("butter",550);
		
   for (int i = 0; i < product.length; i++) 
   {
	   product[i].setProductid();
	  product[i].setTotal();
	  totalCost = totalCost +product[i].getTotal();
   }
   for (int i = 0; i < product.length; i++) 
   {
	   
	   System.out.println(product[i]);
   }
		
 System.out.println("total bill is       =         "+totalCost);
   
	}
	
	
}









